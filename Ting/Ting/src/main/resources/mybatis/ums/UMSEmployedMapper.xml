<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.project.ums.employed.mapper.UMSEmployedMapper">
    <!-- 查询结果resultSet和实体类型UMSEmployed之间的映射关系 -->
    <resultMap type="UMSEmployed" id="UMSEmployedResult">
        <id     property="employedId"        column="employed_id"       />
        <result property="employedName"      column="employed_name"     />
        <result property="employedSort"      column="employed_sort"     />
        <result property="employedState"      column="employed_state"     />
        <result property="status"        column="status"        />
        <result property="createBy"      column="create_by"     />
        <result property="createTime"    column="create_time"   />
        <result property="updateBy"      column="update_by"     />
        <result property="updateTime"    column="update_time"   />
        <result property="remark"        column="remark"        />
    </resultMap>

    <!-- 条件查询 -->
    <select id="selectUMSEmployedList" parameterType="UMSEmployed" resultMap="UMSEmployedResult">
        select employed_id, employed_name, employed_sort,employed_state, status, create_by, create_time, update_by, update_time, remark
        from ums_employed
        <where>
            <if test="employedName != null and employedName != ''">
                <!-- concat是MySQL数据库中的函数，用来实现字符串拼接。
                     concat(string...)
                 -->
                AND employed_name like concat('%', #{employedName}, '%')
            </if>
        </where>
    </select>


    <!-- 根据员工名字查询信息 -->
    <select id="checkEmployedNameUnique" parameterType="String"
            resultMap="com.ruoyi.project.ums.employed.mapper.UMSEmployedMapper.UMSEmployedResult">
       select employed_id, employed_name, employed_sort,employed_state, status, create_by, create_time, update_by, update_time, remark
        from ums_employed
        where employed_name = #{employedName}
    </select>

    <!--新增类型-->
    <insert id="addUMSEmployed" parameterType="UMSEmployed" useGeneratedKeys="true" keyProperty="employedId">
        insert into ums_employed(
        <if test="employedId != null and employedId != 0">employed_id,</if>
        <if test="employedName != null and employedName != ''">employed_name,</if>
        <if test="employedSort != null and employedSort != ''">employed_sort,</if>
        <if test="employedState != null and employedState != ''">employed_state,</if>
        <if test="status != null and status != ''">status,</if>
        <if test="remark != null and remark != ''">remark,</if>
        <if test="createBy != null and createBy != ''">create_by,</if>
        create_time
        ) values (
        <if test="employedId != null and employedId != 0">#{employedId},</if>
        <if test="employedName != null and employedName != ''">#{employedName},</if>
        <if test="employedSort != null and employedSort != ''">#{employedSort},</if>
        <if test="employedState != null and employedState != ''">#{employedState},</if>
        <if test="status != null and status != ''">#{status},</if>
        <if test="remark != null and remark != ''">#{remark},</if>
        <if test="createBy != null and createBy != ''">#{createBy},</if>
        sysdate()
        )
    </insert>

<!--    通过id来查询 UMSEmployed对象-->

<!--UMSEmployed selectUMSEmployedById(Long employedId);-->

    <select id="selectUMSEmployedById" parameterType="Long" resultMap="com.ruoyi.project.ums.employed.mapper.UMSEmployedMapper.UMSEmployedResult">
        select employed_id, employed_name, employed_sort,employed_state, status, create_by, create_time, update_by, update_time, remark
        from ums_employed
        where employed_id = #{employedId}
    </select>


<!--    int updateUMSEmployed(UMSEmployed umsEmployed);-->
    <!-- 根据主键更新公告类型 -->
    <update id="updateUMSEmployed" parameterType="UMSEmployed">
        update ums_employed
        <set>
            <if test="employedName != null and employedName != ''">employed_name = #{employedName},</if>
            <if test="employedSort != null and employedSort != ''">employed_sort = #{employedSort},</if>
            <if test="employedState != null and employedState != ''">employed_state = #{employedState},</if>
            <if test="status != null and status != ''">status = #{status},</if>
            <if test="remark != null">remark = #{remark},</if>
            <if test="updateBy != null and updateBy != ''">update_by = #{updateBy},</if>
            update_time = sysdate()
        </set>
        where employed_id = #{employedId}
    </update>




<!--    int deleteUMSEmployedByIds(@Param("umsEmployedIds") Long[] umsEmployedIds);-->

    <delete id="deleteUMSEmployedByIds" parameterType="Long">
        delete from ums_employed where employed_id in
        <foreach collection="umsEmployedIds" item="employedId" open="(" separator="," close=")">
            #{employedId}
        </foreach>
    </delete>



</mapper>